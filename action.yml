name: "Cache Dependencies"

description: "Setup Python with pip Cache and Install Dependencies"

inputs:
  dependencies-directory:
    description: Where to search for requirements files.
    required: false
    default: "."
    type: directory

  deploy-keys:
    description: Packages deploy keys.
    required: false
    default: ""
    type: string

  python-version:
    description: What python version to use.
    required: false
    default: "3.10"
    type: string
    validation:
      rule: enum
      enum: ["3.7", "3.8", "3.9", "3.10", "3.11"]

  application:
    description: Application packages options.
    required: false
    type: object
    schema:
      type: "object"
      properties:
        install:
          type: "boolean"
          description: " Whether to install packages."
          default: false
        packages:
          type: "string"
          description: "Packages to install with pip."
          default: ""
        file:
          type: "file"
          description: "Requirements file to install with pip."
          required: false
          default: "requirements.txt"

  quality:
    description: Quality packages options.
    required: false
    type: object
    schema:
      type: "object"
      properties:
        install:
          type: "boolean"
          description: " Whether to install packages."
          default: false
        packages:
          type: "string"
          description: "Packages to install with pip."
          default: "isort black mypy flake8 pylint"
        file:
          type: "file"
          description: "Requirements file to install with pip."
          default: "requirements-quality.txt"

  security:
    description: Security packages options.
    required: false
    type: object
    schema:
      type: "object"
      properties:
        install:
          type: "boolean"
          description: " Whether to install packages."
          default: false
        packages:
          type: "string"
          description: "Packages to install with pip."
          default: "bandit"

  test:
    description: Test packages options.
    required: false
    type: object
    schema:
      type: "object"
      properties:
        install:
          type: "boolean"
          description: " Whether to install packages."
          default: false
        packages:
          type: "string"
          description: "Packages to install with pip."
          default: "pytest pytest-cov requests"

runs:
  using: "composite"
  steps:
    - name: Output Config
      run: |
        echo "Install Application: ${{ inputs.application-obj }}"
        echo "Install Quality: ${{ inputs.quality }}"
        echo "Install Security: ${{ inputs.security }}"
        echo "Install Test: ${{ inputs.test }}"
      shell: bash

    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Deploy Keys
      uses: CristovamSilva/ssh-agent-action@master
      with:
        ssh-private-key: |
          ${{ inputs.deploy-keys }}

    - name: Setup Python and Pip Cache
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
        cache: "pip"
        cache-dependency-path: |
          **/requirements*.txt
          **/setup.py
          **/pyproject.toml
          **/setup.cfg

    - name: Install Python Dependencies
      run: python -m pip install --upgrade pip pipenv setuptools wheel
      shell: bash
      working-directory: ${{ inputs.dependencies-directory }}

    - name: Install Application Dependencies
      if: fromJson(inputs.application).install
      run: |
        if [ -z "${{ fromJson(inputs.application).packages }}" ]; then
            echo "No application packages to install"
        else
            pip install ${{ fromJson(inputs.application).packages }}
        fi
        if [ -f "${{ fromJson(inputs.application).file }}" ]; then
            pip install -r ./${{ fromJson(inputs.application).file }}
        else
            echo "No application packages requirements file"
        fi
      shell: bash
      working-directory: ${{ inputs.dependencies-directory }}

    - name: Install QA Dependencies
      if: fromJson(inputs.quality).install
      run: |
        if [ -z "${{ fromJson(inputs.quality).packages }}" ]; then
            echo "No quality packages to install"
        else
            pip install ${{ fromJson(inputs.quality).packages }}
        fi
        if [ -f "${{ fromJson(inputs.application).file }}" ]; then
            pip install -r ./${{ fromJson(inputs.application).file }}
        else
            echo "No quality packages requirements file"
        fi
      shell: bash
      working-directory: ${{ inputs.dependencies-directory }}

    - name: Install Security Dependencies
      if: inputs.security  == 'true'
      run: |
        if [ -z "${{ inputs.security-packages }}" ]; then
            echo "No security packages to install"
        else
            pip install ${{ inputs.security-packages }}
        fi
        if [ -f ./requirements-security.txt ]; then
            pip install -r ./requirements-security.txt
        else
            echo "No security packages requirements file"
        fi
      shell: bash
      working-directory: ${{ inputs.dependencies-directory }}

    - name: Install Test Dependencies
      if: inputs.test  == 'true'
      run: |
        if [ -z "${{ inputs.test-packages }}" ]; then
            echo "No test packages to install"
        else
            pip install ${{ inputs.test-packages }}
        fi
        if [ -f ./requirements-test.txt ]; then
            pip install -r ./requirements-test.txt
        else
            echo "No test packages requirements file"
        fi
      shell: bash
      working-directory: ${{ inputs.dependencies-directory }}
