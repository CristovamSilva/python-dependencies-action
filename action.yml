name: "Cache Dependencies"

description: "Setup Python with pip Cache and Install Dependencies"

inputs:
  dependencies-directory:
    description: Where to search for requirements files.
    required: false
    default: "."
    type: directory
    validation:
      rule: directoryExists

  deploy-keys:
    description: Packages deploy keys.
    required: false
    default: ""
    type: string

  python-version:
    description: What python version to use.
    required: false
    default: "3.10"
    type: string
    validation:
      rule: enum
      enum: ["3.7", "3.8", "3.9", "3.10", "3.11"]

  application:
    description: Whether to install application packages.
    required: false
    default: false
    type: boolean

  application-packages:
    description: Packages to install with pip.
    required: false
    default: ""
    type: string

  application-requirements-file:
    description: Packages to install with pip.
    required: false
    default: "requirements.txt"
    type: file

  quality:
    description: Whether to install quality assurance dependencies.
    required: false
    default: false
    type: boolean

  quality-packages:
    description: Override packages to install with pip.
    required: false
    default: "isort black mypy flake8 pylint"
    type: string

  quality-requirements-file:
    description: Packages to install with pip.
    required: false
    default: "requirements-quality.txt"
    type: file

  security:
    description: Whether to install security dependencies.
    required: false
    default: false
    type: boolean

  security-packages:
    description: Override packages to install with pip.
    required: false
    default: "bandit"
    type: string

  security-requirements-file:
    description: Packages to install with pip.
    required: false
    default: "requirements-security.txt"
    type: file

  test:
    description: Whether to install test dependencies.
    required: false
    default: false
    type: boolean

  test-packages:
    description: Override packages to install with pip.
    required: false
    default: "pytest pytest-cov requests"
    type: string

  test-requirements-file:
    description: Packages to install with pip.
    required: false
    default: "requirements-test.txt"
    type: file

runs:
  using: "composite"
  steps:
    - name: Output Config
      shell: bash
      run: |
        echo "Install Application: ${{ inputs.application }}"
        echo "Application Packages: ${{ inputs.application-packages }}"
        echo "Application File: ${{ inputs.application-requirements-file }}"
        echo "Install Quality: ${{ inputs.quality }}"
        echo "Quality Packages: ${{ inputs.quality-packages }}"
        echo "Quality File: ${{ inputs.quality-requirements-file }}"
        echo "Install Security: ${{ inputs.security }}"
        echo "Security Packages: ${{ inputs.security-packages }}"
        echo "Security File: ${{ inputs.security-requirements-file }}"
        echo "Install Test: ${{ inputs.test }}"
        echo "Test Packages: ${{ inputs.test-packages }}"
        echo "Test File: ${{ inputs.test-requirements-file }}"

    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Deploy Keys
      uses: CristovamSilva/ssh-agent-action@master
      with:
        ssh-private-key: |
          ${{ inputs.deploy-keys }}

    - name: Setup Python and Pip Cache
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
        cache: "pip"
        cache-dependency-path: |
          **/requirements*.txt
          **/setup.py
          **/pyproject.toml
          **/setup.cfg

    - name: Install Python Dependencies
      shell: bash
      working-directory: ${{ inputs.dependencies-directory }}
      run: python -m pip install --upgrade pip pipenv setuptools wheel

    - name: Install Application Dependencies
      shell: bash
      working-directory: ${{ inputs.dependencies-directory }}
      if: inputs.application
      run: |
        if [ -z "${{ inputs.application-packages }}" ]; then
            echo "No application packages to install."
        else
            pip install ${{ inputs.application-packages }}
        fi
        if [ -f "${{ inputs.application-requirements-file }}" ]; then
            pip install -r ./${{ inputs.application-requirements-file }}
        else
            echo "No application packages requirements file."
        fi

    - name: Install QA Dependencies
      shell: bash
      working-directory: ${{ inputs.dependencies-directory }}
      if: inputs.quality
      run: |
        if [ -z "${{ inputs.quality-packages }}" ]; then
            echo "No quality packages to install"
        else
            pip install ${{ inputs.quality-packages }}
        fi
        if [ -f ${{ inputs.quality-requirements-file }} ]; then
            pip install -r ${{ inputs.quality-requirements-file }}
        else
            echo "No quality packages requirements file"
        fi

    - name: Install Security Dependencies
      shell: bash
      working-directory: ${{ inputs.dependencies-directory }}
      if: inputs.security
      run: |
        if [ -z "${{ inputs.security-packages }}" ]; then
            echo "No security packages to install"
        else
            pip install ${{ inputs.security-packages }}
        fi
        if [ -f "${{ inputs.security-requirements-file }}" ]; then
            pip install -r ./${{ inputs.security-requirements-file }}
        else
            echo "No security packages requirements file"
        fi

    - name: Install Test Dependencies
      shell: bash
      working-directory: ${{ inputs.dependencies-directory }}
      if: inputs.test
      run: |
        if [ -z "${{ inputs.test-packages }}" ]; then
            echo "No test packages to install"
        else
            pip install ${{ inputs.test-packages }}
        fi
        if [ -f "${{ inputs.test-requirements-file }}" ]; then
            pip install -r ./${{ inputs.test-requirements-file }}
        else
            echo "No test packages requirements file"
        fi
